// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// local.zip
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localZip = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x97\x79\x38\x14\x6a\xdf\xc7\x67\x8c\x25\x52\xb6\x21\x6b\x0c\xca\xbe\x24\x51\x22\x21\x3b\xd9\xc9\x92\x35\x63\x1b\x33\xc9\xae\x31\xd9\x12\xd9\x26\xdb\x84\xb1\x17\x1a\x4b\x96\x6c\x59\x3a\xc9\xd2\x21\x64\x99\x32\x8c\x30\x76\xa2\x91\xc6\x6e\xbc\x57\xef\xf3\x9c\x27\xcf\x39\xef\x7b\xae\x73\xff\x73\xdf\xf7\x75\x7d\x7f\xdf\xcf\x7f\xbf\xef\xf5\x35\x35\x04\xd1\x82\x01\x3f\x0f\x05\x2c\x69\x02\x38\x76\xe8\x01\x00\x00\x0c\xe1\xe6\x02\x93\xfb\xa5\x39\xf8\x93\x86\xf9\x3f\x9a\x30\x4f\x27\xad\x9b\xc7\x94\xab\xa8\xff\x56\x72\xff\x49\x69\xa4\xe5\x64\xac\x6d\x61\xa1\xa1\xab\x6d\xf1\x9f\xa9\x13\x80\xc7\x20\x65\x93\x8b\x48\xa3\x4c\x3e\x7a\x00\x60\xfc\x24\x00\x20\xfa\x37\x53\x50\x2f\x98\x7b\x00\x02\x01\xf3\x97\xf5\x45\x04\x5a\xda\x1b\xf1\x5b\x71\x5f\x6b\xf8\x11\x15\xe2\x8b\x1f\xf7\xfc\x31\xca\xd7\x2d\xed\x99\x03\xe6\x18\xed\x7c\xc6\xb2\x56\xce\xeb\x8b\x74\x1b\x53\xab\x4e\x1b\x18\x80\x79\x40\x5b\x48\xd1\x51\x01\xb6\x9e\x85\x42\xf7\x64\x46\x87\x69\xc5\x5f\xac\x69\x9a\xdb\x67\xde\x96\x4d\xe1\xe5\x98\x42\x2a\x5d\xfb\x90\x35\x19\xee\x19\xb2\xad\xfd\xc6\x7f\xa0\xba\xc5\xf4\xe9\x9d\x85\x1c\xff\x81\x07\xbb\xd4\x89\xdd\x7d\xbd\x7e\xf1\xb7\xfe\xfc\xdf\xca\x43\xd4\x5a\x11\xb3\x6d\xfb\xb4\x90\xd2\x88\xfc\x75\x91\xb9\xd0\x02\x10\x92\xf1\x29\x4d\x3b\x33\x96\xfe\x2c\xe8\x1a\xa0\xfd\xf4\x01\xc7\x8e\x1a\x99\x8d\x7c\xdb\x19\xa6\x0e\x41\x00\x7a\x22\x9c\x40\x36\x5b\x52\xfb\xba\x3e\x27\x76\xb9\x77\x34\x92\xec\x7a\x22\x4e\xfd\x26\xf5\x5b\x98\x33\xd7\x18\xed\x01\xc3\x0e\x2f\x79\x0c\xe8\xfe\x86\x31\x84\x0d\xdb\xae\x52\x70\x40\x45\xa1\xd1\x1c\x9a\xeb\x05\xa4\xba\x6f\xe8\xd4\x07\x74\xdc\x0c\x4a\x82\xe6\xaa\x28\x60\x3b\xc3\xc1\xc9\x13\x66\xdf\x05\xc9\x27\xc8\xd3\x2e\x9a\x79\xec\x7e\xa0\x7c\xba\x76\x8e\x8a\x9c\x08\x5e\x32\x33\x59\x66\x9a\xe8\xe2\xbe\xcd\x32\xed\xf1\x9b\xb9\xd0\xb6\x99\x0c\x12\x38\x88\x97\x3c\xd4\xab\x0e\xf2\xc9\xf8\xc2\x4a\xd6\x7a\x92\x6f\x77\xee\xa8\xcc\x9a\xb0\x7b\x66\xe7\x3c\xe9\x32\x55\x14\xb2\x73\x2e\x7f\x54\xe2\xb0\x2e\xd0\x3b\xfc\xda\x2d\x9f\xdf\xe4\x22\xcf\xac\x82\xa7\xa6\x56\xe2\x90\x79\x1c\x35\xa4\x87\x2a\xa1\x66\xbe\xbf\x23\x61\x6a\x1d\xdd\x66\xad\x77\x35\xd0\xf7\xb2\xf8\x36\x5a\x59\x0b\xaa\x65\x56\x76\x8c\xaa\xab\x44\x26\xf2\xdf\x01\x99\x06\x84\x9d\x2e\xbd\xb5\xbb\x1b\xa2\xb2\xc4\x31\xc4\x22\x0e\xba\x22\xba\x52\xba\x0c\x2d\xde\x19\xc5\xd6\x64\x2d\x28\xf0\xfa\x39\xf0\x0e\xf9\x72\x05\xc9\xb4\x44\xaf\xf8\x5a\xf6\x8c\xbb\x26\xdb\x7e\x33\xdf\x4a\x5a\x6f\xb2\x92\xf4\xc8\xfa\x1d\xd6\x5f\x36\x7e\xa5\x87\xf9\x5d\xd1\xa2\xcc\x44\x1c\xb6\x6c\x9c\x8a\x7d\xc8\xd1\x50\xec\xe4\xaa\x08\xeb\xba\xda\x20\xf0\xd4\x2e\xd1\x2c\xa9\x61\x99\xbe\x7c\xfc\x48\xd8\xfb\xdc\xfc\x59\x7c\xbf\x52\x5f\xb2\x57\x15\x3c\xcb\x6a\x71\xb1\xf8\x43\x92\x42\x8e\x8a\xa6\x2c\xdc\x7e\x4d\xc9\x9f\x7f\x1c\x47\x80\x68\x10\xea\x39\xa4\x45\xe3\xc4\x02\xdf\x15\xb8\xf4\x9f\x10\x63\x66\xe3\xb3\x2c\x2b\x7e\xd0\x57\x86\xb7\x8e\x37\x63\x8a\xbd\x94\x66\x57\x32\xa4\x61\xcf\x63\x7c\x59\x9a\xc6\x58\xd9\xc0\x38\xc1\xd1\x35\xa8\x7c\x5e\x7e\x1c\xea\xb9\x66\x45\x7d\x67\x2d\x5d\x45\xa8\x7e\xfa\x4a\xd4\xf8\x91\x5d\x50\xd7\x9c\xd2\xdb\x10\x5d\xd6\x2f\x8e\xc2\x6c\x50\x79\xcc\xda\x79\xcb\x78\x08\x14\x12\xfc\x9d\x58\x7f\x87\x7b\xaa\x6d\x4a\x3c\xb3\xca\x9d\xe7\x66\xb4\x8f\xcf\xcd\x74\x9d\x5b\x39\x99\xf2\x44\xdf\x4c\x01\x1b\x65\xf7\x75\xcf\x04\x56\xc4\x0b\x95\x44\xef\xa0\x18\xc9\x29\x4e\x75\xe0\x99\x99\xc2\x61\xda\x95\xc1\xb2\x05\x64\x64\xcd\xe5\xb2\x95\x35\x79\xc4\x57\xe9\xbc\xc2\x1e\x67\x93\x31\xcf\x0b\x1c\x35\xd6\xd0\xc6\xb8\x98\x72\xc5\xc8\xf6\x32\x82\x92\x57\x00\x16\xca\x1d\x19\x01\x17\xe6\x68\x79\xae\x5f\xe2\x3c\x28\x6a\xbb\x45\xf7\x88\x77\x8f\x6e\x27\xf1\x36\xee\xf4\x45\xf8\x6a\x89\xbd\x6c\x71\xc6\xdd\xd9\xf8\x15\xf0\x15\x6b\xa3\x39\xb0\xed\x33\x3b\xa9\x9b\xc1\xdd\xa4\x5b\x0d\x4c\xda\x35\x3e\x6b\x05\xe6\xc5\xc6\x1e\x3a\x9d\x8c\x85\x5a\xa9\xa3\xfa\x9d\xb3\x68\xd7\x27\x50\xc9\xec\x2b\xa2\xf6\xd2\x37\xae\x56\xc4\xc0\xa4\x5e\xa5\x39\x8b\x37\x37\x9b\x09\x18\x9c\x3a\xd5\x21\x69\xc4\xb8\x01\x05\x4b\x38\x10\xd8\x5f\xf7\x67\x73\x9c\x36\x6b\x16\x74\xcb\x5e\x7e\xef\x04\xd5\x09\xa8\x53\xbb\x51\xff\xbd\xca\x9a\x90\x5e\x9b\xcd\xf3\xa4\xb4\x43\x62\xfc\xb2\xd7\x6a\x15\xb7\xe0\x13\x44\xa7\xd0\x62\x85\x63\x39\xc6\x95\xf2\x64\x4f\xe7\x0a\x33\xe9\x46\xb7\x66\x7d\x08\xd6\xab\x21\x3a\x63\x8d\xb6\xff\x23\x8e\x57\x63\x4e\x83\xf1\xe1\xb3\x5a\x37\x17\x4b\xde\x2e\x2c\x23\x05\x9d\xfe\x56\xb5\xb3\x93\x90\x1c\x99\xd6\xad\xa9\xa9\x75\xa2\x2b\x4b\xc6\x83\xc0\x5c\x57\x0b\xea\xa9\x4e\xfd\x00\x27\x66\x6e\xc4\x9c\x8a\xec\xd9\xb3\xda\x4a\x23\x12\x7d\xd0\xbd\xec\xc2\x9f\x72\x71\x19\x41\xf0\x78\x1f\xf8\xab\xbd\x5b\x96\xe2\xb0\xe0\xce\x2e\x4f\xdb\xab\x55\x09\xb7\xe6\x14\x77\x74\xeb\xd3\x84\x03\x76\x83\x57\x02\x2c\xf4\xb8\xcc\xbf\x30\xae\x7c\x32\x5d\xc3\x24\x2a\xd4\x11\xa5\xc0\x34\x25\xf3\xeb\x06\x8a\x3c\x44\x47\xfb\x46\xbd\x31\x85\xdb\xb1\xb2\xda\x0e\xa6\x10\x24\x95\xe1\x68\x71\xb9\xc3\xb2\x3b\x5f\x7f\xdf\xcd\x4b\xee\x08\x3d\x58\x15\x42\x00\xa2\x10\x51\x26\x72\xb0\xaa\xad\xcd\x2f\x12\x79\x83\x1b\x46\xca\x12\x81\x8e\x72\x89\xd2\xac\x08\xdf\xd8\xc1\xca\x99\xce\xbe\x64\x4e\x9d\x7d\x65\x9b\x96\xbb\x0a\x1f\x3e\xc7\xee\x7e\x05\x7c\x0b\xd7\x33\x58\x06\x52\x67\x79\x05\x79\x4d\x17\xe2\xa2\x48\xa4\xd6\xa9\x5c\x61\x6a\xa7\xb0\x60\xf6\xb6\xd8\xa7\x93\x75\xcd\xa4\x6e\xf0\x60\xff\xbe\x32\x9c\x51\x2e\x35\x16\xd3\xcf\x59\x82\x30\x28\x4d\xfb\xb2\x42\x71\x5d\xb0\x86\x5c\x74\x84\x76\x79\x20\x36\x9f\x6b\xf8\xa9\x84\x30\x10\xa3\x2e\x44\x9f\xfe\x66\xb0\x3f\xcb\x72\x52\x44\xf9\x70\xc8\x91\x24\x97\x0c\xfe\xdc\xd2\xf6\xb5\x02\xd3\x56\x6c\xa9\x6c\x73\xff\xf0\x4b\x4d\x6d\x56\x3f\xfe\x5a\x51\xd9\x7a\x38\xf1\xaa\x45\x76\x4c\xe4\x40\xed\x29\x3d\x21\x5d\xa4\x2f\x78\xdd\x70\x37\xde\x15\xca\x35\x44\xce\x63\x70\xdc\x92\x8c\xdb\x13\x59\xed\xfa\x71\xd8\xf3\x52\xff\x39\x0d\x8f\x79\xae\xb3\x79\x53\xa0\x4d\x28\x6b\x8d\x34\x05\x5c\x82\xa2\xbc\xec\x7f\x21\x40\xf2\x25\x92\xf7\x5b\x0e\x88\xa6\x42\xf6\xd9\xfc\xec\x46\xee\x1d\x4c\x9f\xe5\x18\x60\x3a\x18\x83\x65\x8d\x8f\xfc\x8b\xcb\xd8\x22\xdb\xa0\x73\x31\x7b\x2a\x87\xcb\xed\x32\x1e\x8d\x9b\x07\xbd\x1d\xb3\x66\xe4\x19\x94\xdf\xfd\x42\x4b\x47\x54\xa6\xdc\x60\xa8\xcf\x08\x75\x8c\xc9\x49\x20\x46\xed\x01\x34\x6b\x27\x5c\x7d\x23\xf2\x5c\x7a\x25\xfa\x1b\xa4\x43\x17\xce\x24\x19\x99\xbb\x7c\x2d\xef\x35\x8b\xc9\xc7\xd9\x17\xee\x43\x3c\x5d\x49\x01\x42\x01\x08\xe2\xa0\x2a\xf9\xe5\xa9\x4d\x6c\x99\xd5\xcc\x38\xbb\xf7\x7c\x8a\xb4\x30\x6e\x85\xcf\x30\x60\x68\xba\x08\x93\x3f\x3b\x19\xdd\x95\xa4\x1f\x32\xa7\x96\x86\x9e\x9a\xef\x60\x5a\x0b\x74\x2b\xcc\x3a\xa0\x06\x78\xdd\xbb\xde\xcc\x7e\x26\x75\xe9\x65\xe4\x2b\x3b\xa9\xfd\x87\x46\x62\xd2\xc5\x86\x77\x05\x21\x00\xa2\x0e\x49\x1c\x9f\xf0\x21\x32\x27\x4e\x83\x5d\x47\x00\x0d\x8c\x0b\x25\x20\xfd\xda\x7d\x74\xc1\x38\x35\xfc\x70\x1f\x25\xae\x89\xab\x8a\x24\x68\x27\xff\x7c\xcf\xd2\xbd\x81\xf8\x0c\xb5\xb8\xe6\xba\xcd\x9b\x0d\xba\x04\xd4\x36\x97\x58\x4e\xb6\xa3\xf5\x61\x66\x36\xe3\x9b\xb6\x74\x70\x9c\x5b\xc5\x5c\xf0\xe6\x7b\x7a\x39\xf0\x36\x99\x6a\x49\x51\x9d\xae\x8a\xe0\x10\x0b\x33\x47\x75\x69\x43\x14\xa6\xe7\x2d\xde\x2b\x75\xdb\x3c\x83\x96\x17\xf7\xe5\xbe\xbe\x04\xf1\xa6\x9f\xc7\x92\xf3\xc0\x83\x15\xe8\x23\xe0\xaf\x70\x59\xa4\x51\x36\x19\x9f\x14\x38\x29\x41\x07\x00\xf4\x33\xff\xd3\x70\xb9\x8b\xc8\xb5\xe9\xbb\x29\xa2\x0b\x9e\xd4\xed\x55\xb7\x1c\xab\xf6\x8a\x3b\x3f\x7c\xe7\xc2\x84\x74\x2a\xe5\xce\x05\xfb\x33\xeb\x0a\xf0\xa1\x49\x3c\xce\x7b\xd6\x8f\x8b\x8d\xf6\x40\x28\xfa\x02\xa4\x95\xd9\x88\x5e\x74\x93\xb5\x77\x4c\x2f\x0d\xe8\xe6\xb6\x93\x55\x05\xaf\x23\x9d\xb9\x57\xde\xeb\x36\xae\x7a\xc7\x47\xc9\x3a\x30\x18\xff\xe2\xfe\xa0\xda\xa2\x35\x61\x66\x24\x33\xbe\xbb\xbb\xfd\xb0\x7b\x66\x84\xe8\xe1\x5d\x76\x36\x95\x6a\x2f\x98\x74\x65\xec\x9e\xd8\x7c\x4a\x1e\x64\x91\xaa\x09\xcb\x29\x52\x4e\x27\x2c\x04\xd7\x04\x6a\x78\x38\xf1\x07\xad\x57\x65\x46\x2f\x40\x5f\xd5\x20\x83\x2f\xa9\x83\xe3\x2d\x1e\x09\xe5\x9b\xe7\x88\xa8\x6a\x5f\xbc\x66\x60\xab\x14\xaf\xa5\xb4\x18\xf5\xa9\xea\x96\xfd\x69\xe5\x04\x8d\x7d\x55\xa2\x3d\xfb\xae\xc9\xd0\x40\x51\xd3\x65\xf0\x6e\x42\x21\x59\x9d\x03\x23\x0f\xeb\x01\x20\x16\x83\x8a\x28\x69\x85\x27\xd3\x46\x37\xe4\xa3\x3f\xd6\x5a\x3e\xec\x64\x73\x7f\xff\x8a\x5b\x7f\x2f\x7d\xde\x35\xc4\xc5\xad\xed\x7e\x1b\xab\xa2\x8f\xc6\xa6\x65\x4f\x48\xb0\x15\x93\x61\x4e\x98\xb4\x37\x26\xd8\xc6\x50\xa4\x1a\xed\xa2\x1f\xc5\x7e\xaf\xf4\x06\x7f\x6b\x3d\xce\x2f\x56\xf8\x69\xcc\x7e\x66\x42\x78\xc2\xeb\x14\x97\xa2\xc9\xb0\x26\x27\x7e\x36\x89\x9c\xf3\xa8\x6c\xf9\x1f\x0f\x23\x45\x03\xc3\x49\x7b\x0a\x0f\x30\x7b\x1b\xd3\x0d\x7c\xae\x14\xbd\x45\x39\xa6\x50\xb3\x37\xfc\x8f\xd7\x2e\x9c\x44\x43\x19\x73\x8a\xb0\x42\xe2\x8d\x18\x9e\xeb\x0e\x7b\xf6\xe9\x83\xaf\x93\x8a\xcb\x6e\x73\x3f\xa6\xf8\x64\x43\xad\xbc\xd0\xf3\x25\xe2\xfe\x96\xeb\x7e\xf2\x19\xb2\x11\x0f\x4f\xee\x16\x3a\xa3\x6b\x4a\xfa\xbb\x06\x9c\xe9\x02\x78\x6c\xfa\xb4\x20\x0a\x68\xb3\xd4\x79\xd5\xfc\xa8\x3c\x33\xf6\x89\xdf\x13\x93\xc2\x4d\x59\xaf\x5f\x5d\x30\x04\x6d\x28\xa2\x22\xab\x7d\x70\x43\x2c\x72\x0f\x14\xa7\xd3\xba\xcc\x7a\xbb\x47\xe2\x5e\x07\x9d\x76\x97\xc8\x99\x39\xb1\x13\x8c\x17\xce\xe5\xc3\x54\xa8\xbf\x68\x2d\xf0\x07\x19\x7c\xb2\x7f\x3c\x8f\x6c\x44\xb1\xe2\x1b\x03\x5a\xab\x05\x9b\xd0\xa5\x4e\x65\x4e\xcd\x3c\xcc\xa6\x1f\x07\x12\xda\xd2\x0a\x6c\x63\x7b\x29\xf3\x8c\x5f\xe3\x3a\x16\x0b\x76\x65\xed\x8e\x58\xe1\xe9\x3a\xf2\xb1\x18\xad\x5b\x0c\xdb\x89\xe7\x6e\x54\x4a\x1b\x2c\x3a\xf9\xc6\x7e\x16\xcd\x72\x21\x66\x67\x0c\x6f\xde\x03\x7d\xba\xcd\x91\x7b\x29\xe9\x1a\x78\x5e\x4c\x47\x74\xff\x7c\xca\x93\x47\x15\xe0\xda\xe9\x2c\xf6\xf5\xe4\xfd\xb8\xd6\xfa\x10\x07\x14\x69\x29\x85\x9c\xdf\xd6\x64\x2b\xe4\x5a\x60\x88\x24\xd2\x7f\x89\xd0\x30\x1b\xe7\x5c\xcb\x2c\x93\x63\x9e\x3c\x34\x1e\xbc\xe1\xf0\x78\xd4\x2d\x20\x9b\x6d\x60\x08\x0c\x8d\x4d\x7c\xeb\xc1\xe3\xfa\x5e\xaf\x36\xd3\x57\x1d\xcd\xd4\x88\x02\xb9\x5a\x6c\x6b\x94\xc7\xeb\x7f\xf5\x4e\x32\x62\xa3\xd5\xbc\xe8\xf2\x3c\x9f\xde\xfd\x47\x9b\xa8\xd5\x8f\xb1\x9c\x89\xcf\x66\x95\xf8\x36\x02\x67\x65\x31\xf9\x30\xf2\xc3\xf5\xe7\xdc\x8a\xf6\x43\x5f\x18\x32\x4c\x2f\x35\x8d\xc7\x4b\x31\x28\x70\xd5\xbb\xf9\x59\x3f\x71\x92\x2a\x45\x07\x23\x18\x6e\x89\x2c\x24\xcc\x7c\xda\x8d\x53\x09\xad\xac\x18\xb5\x30\x68\x8d\xeb\xaa\xdd\x29\x07\xc5\xf2\xd6\x08\xf4\xb3\x92\x22\x3f\x56\x78\x2d\xc1\xb7\x8a\x47\x66\x16\xc2\x9b\x54\xd5\xc3\x30\xaf\x0a\xa7\x4f\x4c\x04\xbd\x7c\x6e\x2f\xdb\xb9\xfd\x2c\xca\xd0\xbe\x68\x2c\xd5\xc3\x64\x13\xfc\x43\x48\x85\x6f\x58\xe8\x6a\xc2\xcc\x30\x3f\xf6\xba\x08\xbc\x5b\x62\x73\x5f\x27\x96\xb4\x88\x56\xf9\x6a\xce\x55\x63\x0c\xbf\xbe\x51\x1b\xe7\xa1\xca\x02\x65\xdb\xe4\x4c\x85\xf1\xe0\xf6\xe8\x7b\x87\x12\x71\x4d\x30\x09\x53\xe4\x44\x36\x04\x67\xc3\xed\xe9\xaa\x59\x44\x93\x8e\xa5\x32\x65\xa3\xbe\x53\x33\x1c\xf6\x99\x36\x9f\x45\x8e\xde\x7f\xe4\x8c\x29\x87\xf8\x19\xf7\xe5\x2a\xb1\xae\xbf\xe9\xda\x96\xc3\x3b\x2c\x19\xac\x94\x13\xc1\xe0\x4c\xf7\x4c\xb9\x09\x5c\xba\xdc\x5c\x01\xd3\x95\xe4\x1e\xfc\x2b\x3f\x7f\xa4\xf9\xb2\x25\xca\xac\x59\xe8\x6b\x28\xed\xc5\xa5\x3b\x5c\xb3\x6a\xc6\x26\x94\xbd\xb3\xac\x45\x62\x3c\xde\x17\x4a\x0b\x48\xfa\x5e\xc0\x66\xa2\xa9\xff\x34\xd6\x6f\xae\x91\xc1\xd1\xd4\x39\xd6\x01\x22\x16\x1a\xf3\xe2\xec\xb7\x0e\x89\x5d\x77\x10\x7c\x44\xda\x25\x2d\xda\xe3\xfe\x76\xc9\x58\x8b\x02\x92\xc8\xb4\x9a\xff\x2e\xe3\xd2\x50\xaa\x5d\xb2\xf5\xc0\xf5\xbe\x99\x30\xd0\x0f\xf6\x52\x3b\x47\x5b\xc9\xa4\x82\x70\x71\x2e\xc9\xc9\x1c\xef\xa6\x07\x10\x26\x2b\x82\xb4\xe0\x45\x5f\x55\xdd\x7a\x58\x69\x5f\xd7\x84\xb7\x2d\xe2\x5c\x56\x3a\x55\xea\x0c\xa5\xae\x3b\x65\xc5\x3f\x82\x59\x96\x46\x78\x46\x05\xa4\xd8\x6b\xb2\xcb\xbe\xc4\xec\x9a\xa6\xcc\xcb\x59\x7d\x59\x8a\x56\xc0\xeb\x63\x01\x61\xfd\x6c\xbf\xfa\x7b\xcd\x09\x1b\x75\xfa\xca\xa8\x0f\xab\x73\x02\x89\x2e\x9c\xd7\xbd\x04\x7d\xda\xb6\x8c\xf9\x07\x04\x82\xcf\xa8\x4c\xdf\x33\x95\x8f\xb9\x1c\xa5\xcd\x6f\xd8\xa7\x34\x03\xc5\x4a\x74\xb0\xd7\xf2\x79\x31\xbe\x6b\x3e\xcf\x67\x87\xdd\x58\xc1\xc1\x28\xb8\x41\xbd\x07\x4b\x86\xe3\xdd\x04\xdf\x1a\x85\xe1\xac\xfb\x53\xd9\x1c\x67\xb7\x46\x58\x64\x65\xd0\x0c\x11\x41\x72\xbc\xa4\x30\xbf\x18\x3e\xb4\x31\xf2\xfb\xe8\x50\xc0\x94\xb7\x80\xca\xc4\x55\x9b\xf0\xca\xf2\xa9\x37\xf9\xe9\x29\x2b\x34\x2a\x33\x17\x3f\x8c\x98\x0e\x81\x07\xc6\x40\x8b\x9a\x5e\x47\x0d\x76\x23\x93\x05\x18\x17\x2f\x8b\x47\x0c\xb4\x53\x0d\x8d\x2d\x14\xbb\x23\x6e\xba\x92\x77\x94\x55\xf8\xc6\x88\xdb\x12\x4a\x8c\xe7\x50\x25\x35\x64\x6b\xfc\x0a\x77\x8f\x69\xa7\x22\xf4\xfc\x30\x78\x72\x64\xa8\x18\x56\xcd\x1a\x76\xa7\x47\x39\xe1\x34\x15\xcf\xaf\xc7\x98\xc7\x59\x34\x79\xd4\x91\xa1\x75\x08\x5d\xea\x7e\xfc\xdd\x23\xa1\x08\xae\x8a\x7b\x73\x0e\x4b\x88\x5c\x11\x6c\xec\xca\x17\x4b\x21\xd0\xaf\xbe\xcf\xba\x1b\x43\xbb\xc6\x7b\xc0\x08\xa8\x8b\xc9\xc1\x90\x70\x34\xf3\xc0\xcd\xe4\x43\x16\x53\x43\x20\x0d\x18\xf0\xff\xb5\x09\xd1\x7f\xbf\x58\xff\x7d\xff\x6b\xf5\x32\x01\x84\xfe\xf7\x07\x04\x70\x03\x5e\x3b\x6d\x90\xd5\x3c\xf0\xc0\x78\xa0\xf9\xd9\x4a\x0f\x3c\x30\x1f\xde\xb7\xf4\xf3\x7f\xdc\xf7\xaf\x0d\xe4\xb8\xef\x9f\x57\xfa\x71\xf7\x40\x6d\xfa\xdd\xe3\xee\x7f\xd0\x8e\xbb\xff\xb5\xb5\x1c\x77\xbf\xf9\x37\x81\x71\x9c\xc4\x95\x5a\xc0\x5d\x79\x8c\xf4\x07\xf9\x17\xe9\xff\x6a\x3a\x7f\x90\x7e\xfa\xc4\xfc\xc3\xde\x73\x9c\x5a\xf8\x6e\xbd\xcd\xd5\x0f\x0f\x64\x06\xba\xbf\xf9\x79\xa3\xae\xe2\xfa\x94\xbd\xfe\x9b\xfa\xd7\x08\x3c\x4e\x9d\xa1\xff\x67\x81\x78\x9c\xca\x22\xf3\x9e\xe1\x27\x8d\x8d\xe6\x5f\xf4\x5f\x54\xba\x9f\x05\x12\x40\x07\xa0\x03\x30\xd3\x00\x00\x46\x3f\xab\x22\xe0\x7f\x02\x00\x00\xff\xff\x39\xaa\xcd\x82\x6e\x0e\x00\x00")

func localZipBytes() ([]byte, error) {
	return bindataRead(
		_localZip,
		"local.zip",
	)
}

func localZip() (*asset, error) {
	bytes, err := localZipBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local.zip", size: 3694, mode: os.FileMode(438), modTime: time.Unix(1569169785, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"local.zip": localZip,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"local.zip": &bintree{localZip, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
