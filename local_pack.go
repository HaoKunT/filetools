// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// local.zip
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localZip = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x97\x67\x3c\x1b\x7a\xdb\xc7\x13\x11\x15\xb3\x2d\x15\xb1\x29\x35\x6a\x53\x5b\xcd\x72\x28\x62\xef\x55\x6a\x94\xd8\xbb\x46\xa9\x52\x6a\xd5\x6e\x29\x5a\xb3\x4a\xa9\x1d\xb5\x15\x31\x1a\x41\xad\x9a\xb1\xf7\x2e\x22\xd6\xf3\x39\x77\x9f\xfb\x3c\xf7\xb9\xcf\x78\xce\xf5\xe2\x3f\x5e\x5c\xdf\xdf\xdb\xdf\x57\xfb\x3e\x88\x90\x04\xf0\xeb\xd0\xf8\xf3\xc2\x01\xff\x31\x44\x00\x06\x00\xc2\xcd\xf6\x01\x42\xc0\x40\x1f\x02\x00\xd1\x6f\x05\x58\x48\xac\xe5\x5a\xfa\xf8\x93\x02\x80\x84\x6b\x20\x10\xe0\x5f\xc7\x5f\xef\x93\xfd\xb6\xff\xd8\xd1\x4a\x49\xeb\x1f\x52\x62\x5e\x09\xff\x8e\x42\xfb\x5f\x14\x0d\x25\x2b\xcd\x7b\x7a\x7a\x0a\xaa\xf7\xf4\x7e\x12\xc5\x28\x9f\xfe\x15\x91\x1a\x00\x00\x10\x03\x9c\x4a\x5e\x69\x4b\x64\xb5\xb5\x37\x5e\x01\x00\xdc\x28\x00\x00\xf6\xbf\x21\xda\x3f\x42\xd8\x79\xbb\xb9\x21\xbc\xf8\x5d\xdc\xfe\x45\xff\x95\xfc\x27\x74\x1f\x83\x59\x37\x06\xa3\x1b\xcd\xf2\x36\xf3\x12\x5a\x93\x2f\x2f\xb0\xaa\x73\x85\x11\x74\x03\xb7\x0c\x48\xb9\xd9\x08\x9e\x11\x5e\xbf\x27\x23\xbf\x91\x1f\xbc\x16\xee\xe0\x57\xde\x94\xf7\xb5\x9f\x4c\xa4\xca\x24\x56\xfb\xe1\x58\x8d\x5f\x96\xbf\x8b\xf8\xb8\x16\x43\x43\x31\x1f\x83\x34\x4f\x87\xb3\x3e\x83\xdb\xa8\x25\x3d\xa4\x03\xd4\x08\xbc\xee\xb6\x2b\xec\xe7\x7b\x9e\x22\x07\x60\xc2\xf5\x37\x2d\x58\xa0\x5c\x0c\xd5\x9b\xeb\x8f\xb3\xbd\xb6\x4f\xfa\x4f\xb6\xf7\x5a\xe0\x0c\x19\xf6\xb8\x60\xf0\x65\x73\xe8\x13\xb9\x33\x42\x5b\x87\xb0\x51\x4e\xd8\x29\xcf\xee\x69\x8e\xcd\xe6\x37\x79\x2a\x7f\x32\x9c\x17\xd6\x03\x6b\x67\xcd\xf9\x89\x30\xe8\xba\xc4\x15\x04\xe8\x82\x69\x1c\x58\x0a\xb0\x02\x5e\xc0\xfc\xa9\x71\x56\xd6\x14\xe3\xbe\x51\x15\x9c\xa1\x2d\x04\x21\xd7\x24\x28\x82\x88\xfc\xa1\x38\x3d\xac\x55\x28\x67\x28\x9c\xd1\x7e\x93\x7a\xd7\xb9\x35\x3d\x4c\x4e\xb2\xf4\x58\x00\x94\x73\xa5\x99\x34\x88\x06\x49\xa1\x01\xb8\x04\x7a\x47\x13\x27\x49\x28\x07\x10\xc0\x09\x04\x6a\xd6\xce\xca\x08\x4e\x5b\x5d\x2a\x34\x57\xa6\x43\x9e\x55\x14\x85\xc1\x99\x07\x83\x2c\x65\x72\xb7\x5a\xae\x9c\x31\x7c\x3a\x8d\xea\xef\x23\x0a\x21\x35\x06\x1c\x11\xf8\x85\xc2\x81\x56\x8e\x63\x27\x4f\xa0\x38\x1f\xac\xd9\x56\xc6\x93\x77\x16\x2b\x92\x33\x65\x1b\x35\xc4\x41\x64\x48\xba\xf2\x3a\xdb\x86\x96\xce\x8d\x16\x50\x0b\xe4\x0c\xde\x78\x37\xda\x06\xd6\xaa\xa7\x7a\xf8\x98\x18\x67\x87\x5d\xd4\x09\x9e\x95\xda\xbd\x83\x95\x5b\x38\x80\x6a\x6f\xae\x84\xce\x02\x42\x98\x70\x2a\xcf\x9b\x31\x31\x63\x6e\x7e\x8e\x97\x66\x8c\x19\xa8\x9c\xd0\xd9\xc2\x10\xef\x55\x99\x7e\xa6\x6f\x1e\xcd\x5e\x1a\xa8\x4b\xa1\xdd\x80\x61\x6e\x90\xb2\x3a\xa2\x54\x0f\x95\xb9\x36\xbc\xb1\xe4\xdf\x44\x53\x7e\x39\x5e\x7c\x7e\x39\x51\xbc\x73\x02\xdd\x25\xd8\x7d\xb2\x77\xb2\x81\xf2\x91\x9d\x91\x2a\x3b\xdd\x97\xb8\x08\x8e\x5e\x63\x5e\xdb\x8a\xc6\x65\xa2\xe8\xf2\x67\x1d\x5e\x97\x09\x9d\x73\x71\xce\x2b\xc8\xca\x31\xec\x24\xf2\x67\xc7\xb5\x4c\xda\x9e\x91\x7d\x0b\x56\x0e\xd4\xbf\xfc\xa5\x0a\xd3\xe9\x90\x50\x31\x9a\x50\x0d\x79\xac\x9e\x9c\x22\xf0\xb0\xf8\xc7\x00\x4d\x8e\x1c\x6c\x41\x44\x28\x7b\x6a\x25\x86\xf3\x9d\xa8\x17\x9b\x25\xd5\x0e\xb3\x7f\x3b\x31\x21\xfc\x14\x08\xcf\xcc\xfe\x05\x1c\x3f\x86\x41\x5b\xba\xda\x6c\x11\xcf\x6e\x93\x20\x71\x11\x6b\x57\x36\x55\xdb\x69\xb2\x1f\x54\x18\x45\xd8\x49\x9e\x69\xa2\xaa\x86\x8a\xc6\x37\xd8\x52\x0f\x82\x0e\x92\xb0\xdc\xa8\x2d\xd4\x90\x58\xe5\x53\xfa\xc6\xb1\x6a\xc2\x8d\x7e\x89\x80\xc3\x4e\xcd\x86\xb1\xbd\x4a\x15\x6b\x29\xb1\x8d\x7e\x8e\x2a\xfb\x56\x7e\x64\x9a\x6d\x7e\xcd\x1c\x78\xb6\xfa\x14\x3b\xe2\x62\x6f\x61\xdc\xf2\xf8\xe2\x0c\xe3\x5f\xb7\xcb\x0f\x49\xb8\x42\x31\xd4\x3d\xd9\x3b\xba\xe7\x5f\xb6\xb4\x54\x25\xae\x91\x98\x20\x37\xfb\x35\x8a\x05\xe4\x95\x53\xe6\x2d\x5b\x84\xa1\x6a\xc6\x24\x47\xa6\xb3\xf0\x87\xa5\x53\x41\x6c\x52\xc4\xf9\x62\x8a\xc8\x6e\xa7\x56\x45\x89\x9a\x23\xdd\x2e\x74\xdd\x8b\xea\xee\x59\xc2\x0a\xc9\x32\xa5\x6b\x47\x30\xc9\x4f\x57\x82\x12\x23\x1d\x5e\xce\xd5\x7e\x49\xd4\x1b\xda\x03\xef\xd4\xc4\xde\x4d\x13\xd5\x85\x72\x7f\x89\x05\x0d\x95\x0d\x72\x1a\xf7\xf6\x7c\x8e\x7c\xde\x1d\xa0\xea\xa0\xa2\x26\xae\x24\xc2\xa3\x6b\x9e\xf5\x9c\x72\xa8\xfd\x7a\x18\x0e\x99\x67\x38\x63\x72\xc5\xce\x70\x05\x99\xa4\xdb\x72\x36\x0f\x33\x25\x8a\xb7\x3d\x29\x02\x61\x76\x45\x64\xf8\x1e\xc7\xbd\xb9\xc1\x92\xcd\xfc\xaa\x96\x47\x62\x87\x35\x8f\x69\x54\x14\x6c\x67\xb0\xac\x71\x15\x29\x95\x5d\xee\x84\x16\x8e\x4c\x5f\x96\x4a\x1e\xfd\xe8\x61\xef\x6d\x75\x9f\x19\xdf\xb7\xee\x00\x8d\x70\x4f\x2c\xfb\xfe\xbc\x8f\x77\x5a\xa3\x4f\x39\x30\x35\x38\x21\xab\xef\x56\xc4\x98\xd2\xd2\x48\xa7\xfc\xfc\x30\xeb\xb8\xbc\x6b\xa4\x5d\xe7\x64\x21\xf9\xf2\x47\x1b\xae\xdc\x04\xde\x88\x05\x8b\x1f\xf5\x76\x96\xca\x67\x9b\x05\x4c\xcb\x74\xcd\x09\x4d\xa2\x16\xb9\xf8\x62\xe4\xfb\xda\x63\x69\xc9\x6a\x5e\x6c\xf3\x6d\x5d\x7b\x81\x1b\xcd\x8f\x10\xe3\x8f\xd6\x4b\x54\x3d\x35\x77\x0f\x34\xe5\xd0\xaf\xdf\xb8\x93\x9c\xe3\xec\x5f\xd0\x4b\x76\xd4\x80\x44\x0a\x0e\x37\xa4\x2c\x5b\xcd\x31\xd5\xe1\x85\xb4\x6f\xcc\xb1\xcb\x04\xcb\xc9\x64\xde\xd1\x71\xec\x47\xde\xb2\x41\xe3\x25\x5f\x45\xc7\x1e\xca\x19\xf9\x36\x15\x7e\x1a\x0a\x21\xf0\x5b\xaa\xcf\xf1\xe2\xfe\xf0\x4b\xce\x82\x14\xeb\x75\x3b\xc5\x25\xb8\x62\xbe\x7e\xab\xb9\x07\x85\xf0\xad\x37\x5a\x39\x85\xef\x89\xef\x2d\xaf\x0c\x6c\xea\x3b\xc7\x04\x61\x60\x21\x3c\x6d\x23\x21\x86\xb4\xb5\xe5\x77\x23\xb2\xba\x44\xee\xbb\xe7\xd5\x3b\x57\x8b\xa5\xf2\x19\x44\x68\xad\xe9\x12\xcb\xed\xbc\x06\x36\x59\xac\xc3\x24\xde\x17\x4d\xdb\x79\x73\x57\x95\x79\x8f\xc1\x0c\x5c\xa5\x74\xcc\x91\x73\x9f\xdb\x77\x83\x4a\x65\xe4\x68\xe0\xba\xa4\x9c\xce\x2c\x51\xc2\xea\x5c\x0e\xb3\x6d\x0b\x52\x4a\x7c\x6c\xc7\xcf\x2a\xdb\xfa\x7a\x86\xbe\x87\x71\x7e\x78\xca\xd1\x1d\x1e\x6b\x3e\x57\xac\x60\x53\xa4\x7c\x40\x30\xeb\xb9\xdf\x2e\x1d\x2e\xb5\x22\x83\x40\x39\x19\xe1\xf5\x72\x28\xe5\xaa\x97\xef\x56\x0c\xda\xf3\x99\x1c\x23\x55\x5e\x4a\x22\x21\xe8\x5b\xb6\x01\xf9\x23\x3a\x5d\x40\xd9\x75\xcd\x99\x50\x22\xf7\xd8\x8b\x4f\xfe\x82\x5b\xdf\x9c\xce\xa8\xeb\xd7\x9c\x2d\x3e\xb4\xad\x7a\x61\x3c\x8e\x34\x4d\x55\x9a\x34\x03\xce\xf9\x65\x1f\xad\xb4\x3a\xf6\x16\x62\x9e\x06\x74\xf9\x47\xbf\x28\x6c\xb6\xbc\x7b\xaa\xae\xa8\x26\x8f\x66\x96\x7d\xf7\x23\xbc\x5b\x29\x57\x33\x75\x30\xeb\xa8\xcd\x39\x65\x94\x39\x84\x83\x97\x39\x01\xdd\x54\x91\xea\xb9\x09\xd0\x2d\x4a\x6a\xcb\xe9\x59\xaa\xcb\x33\x3b\x38\xac\x1f\x71\x7c\x77\x15\x4d\xdd\x8e\x0e\xf4\x5c\x0b\x31\xe6\xee\x69\x10\x5f\x3c\xcb\xba\x62\x66\x5b\x29\xc1\x29\x5e\xe2\xe9\x13\xb5\x45\x31\x55\x0a\x9f\x7e\xf0\xc0\x45\x61\xa6\x6c\x8e\xbd\xf4\xeb\x70\x11\x8a\x09\x41\x3e\xbf\x98\x51\x6a\x91\x7c\x9f\xc3\xa4\x11\xe5\x4b\xca\x71\xe2\xaa\xa9\x95\xe6\x2d\x51\xf8\x4e\xc7\x32\x3e\x32\xd2\x44\x54\x08\x66\x98\x6e\x6c\x5c\x7f\xdd\x95\xaf\x83\xe8\x70\x04\x68\x92\x51\x36\x1b\xf4\xfc\x82\x6b\xb5\xc9\xb1\x99\xbd\x9c\x77\x9e\xc2\x9c\xd6\x10\xf5\xa5\x77\x44\xe5\xe3\xd1\x4b\xbd\xea\xbb\x83\xc6\xdc\xdb\x7c\xae\x29\x4b\x8b\x9e\xde\xb6\x0d\xcd\xfa\x2e\x9b\x5f\x7b\xd6\x3d\x7f\x30\x05\x38\x7b\x3e\x28\x30\xcd\x79\x62\xa5\xf3\x9a\xbc\xce\x55\xcc\x10\xba\x51\x32\x96\x69\xbe\x34\xf4\xc2\x3c\xf3\xed\xb7\x68\xca\x56\x89\x90\x9d\xdd\xc4\xf0\x88\x55\x7c\x13\x7e\xf8\x74\xd0\x3b\xb1\xa7\xde\xac\x12\x49\x63\x28\xe6\x07\x1d\x33\xd1\xcf\x76\x42\x50\x46\xa4\x16\x7c\xda\x0f\x8b\x3f\xb0\x2e\xa1\xbd\xe1\x90\x21\xc4\x8c\x88\x13\xb6\x88\x53\x65\x86\x42\x7d\x1d\xae\x59\xbf\x85\x81\x68\x1c\xc3\x4b\x35\x6f\xa6\x4f\xa3\xe9\xe3\x46\x38\xa8\x35\xe2\x4b\xc3\x65\x2a\xe3\x0b\x6b\xe9\x23\x28\xe5\xf0\x2b\xf2\x0d\xad\x91\x5b\x3b\x0f\x36\x04\x80\xbd\x1f\x36\x02\x3f\x21\x4b\x9b\x71\xd2\x59\x84\x1e\x56\xf4\xc5\x98\x73\x56\xba\x96\x8f\x7e\xc6\xc8\x03\x4b\x51\x31\x5a\x03\xce\x05\xf7\x86\xaa\x64\x65\x95\x1b\xb4\xd7\x16\x24\xbe\x39\x37\x44\x40\x04\xeb\xf9\x49\x0d\xd0\xf9\xaf\xc9\x61\x71\x14\xca\x07\x79\x81\xb2\x96\xdf\x53\x8c\xb6\x83\x52\xde\x37\x8a\xa9\xdc\x64\x7a\x0a\x11\x4f\x5f\xec\xda\xfa\x24\xc6\x8c\x9e\x4a\x37\xa3\x8a\x82\xf2\x21\x04\x4d\x98\x8a\x05\xc8\xc4\xcc\xa2\x43\xb5\x95\xf5\xa7\x42\x1b\xb1\x1f\xe0\x83\x86\xf5\x77\x58\x38\xfb\x32\xb8\x48\xc6\xb8\x28\x2b\xf1\x6e\x7d\x9e\xf3\xe2\xbc\x74\xe7\x35\xbc\x1f\x15\x82\x0f\xd1\xd7\x54\xd4\x0c\x57\xb0\x48\xa3\x28\x1d\xc9\x33\x56\xdd\xce\x4e\x4f\xff\x70\xc2\x99\x71\xee\x0e\x15\xbf\x72\xd5\x92\x8d\x41\xdc\x1d\x13\x0e\x8f\x61\xd4\x18\x4b\xbc\xe3\x87\xd8\xca\xcd\x9c\xd9\x1f\xb4\xb7\x7a\xe7\x96\x5d\x24\x45\x07\xc7\x5f\xdf\xeb\xf5\x7c\x48\x73\xc4\x2c\xd2\x4c\x95\x90\x31\xab\xed\x26\x6a\x38\x9e\xc5\xb7\x56\xe2\x28\x93\xfc\xf6\x3e\xb8\x69\x74\x2f\x7a\xb2\x9b\xf7\x61\xf4\x1a\x19\xc1\x2b\xb4\xb7\xa8\xb9\xf2\x5a\x22\xbd\x87\x36\x24\x2f\x91\x8b\xf5\x2b\xcb\x48\xd7\x3e\x16\x48\xe3\x71\x6d\x44\xb8\x34\xfe\x6a\xb9\xb4\xd1\x1e\xb9\xc0\xb3\x21\x4a\xa5\xba\xc2\x13\x9e\xdc\xb0\xd4\x2e\x6d\x72\x02\x65\xbd\x44\x36\xe7\x47\xf3\xf2\x22\x0b\x77\xe8\xbe\xfc\x20\xf2\x74\x42\xa4\x2c\x1d\x49\xf3\x9a\x22\x99\x27\x59\x4a\x1c\x9b\x49\x32\xf1\xbd\xa6\x32\x84\x14\x8e\x4c\x53\x47\xca\xf9\x84\x57\x47\x7d\x07\x3c\x64\xef\x2e\x8d\xef\x5e\xa0\x62\xbe\x43\xc4\xe5\x0e\x92\xf0\x39\x44\x9c\x06\x02\x53\x0c\x2a\x45\x82\x6d\xef\x4b\x03\x05\xca\x4e\x92\xe6\x57\xa6\xa8\x07\x67\x56\xb5\x05\x4c\xe3\xc9\xfa\x46\x4e\x37\x2f\xff\xaf\x19\xd8\x97\xbc\xd2\x4e\xfc\xe2\xb4\x61\x41\x04\x00\xc0\xff\x71\x33\x70\xff\xd9\x0c\x04\xff\xbc\x19\xc4\x19\xdd\x87\xd3\x1b\x51\xcf\x18\xad\x3f\x41\xa2\x23\xe3\x94\x52\xd5\xd7\xd8\x26\xf9\x33\xec\x52\x55\xab\xec\x36\xeb\xbb\x6e\x76\x89\xe4\x05\xa2\x90\xde\x3a\x0a\x90\x5a\x35\xc1\xc2\x14\x71\x76\xe0\x88\x4c\x8a\x58\x6d\x41\x8a\xf5\x59\xa8\x9c\x88\x1f\xc2\xf0\x2c\x22\xdb\xab\x5c\xc8\x4f\x86\xc5\x27\xbc\x4b\x64\x25\xb8\xf9\x20\x4b\x29\x0d\x6e\x7a\x2b\x60\x17\xbb\x51\x5e\x19\x94\x74\xaa\x71\xb7\x97\x19\x87\xe7\xae\x71\x49\x6f\xf4\x7c\xed\x12\x92\x17\x4d\x38\x1d\xec\x31\xde\xb4\xcd\x0b\x46\xc7\xcd\xe0\x87\x7c\x1c\xb4\x8c\xe6\x5d\xd3\xae\xcf\xfa\xb8\x68\xc5\xe6\x67\x1e\xa8\x4d\x54\x16\x97\x4d\xbf\x21\x37\x6d\xb0\xf1\xe1\x9e\xe2\x22\xda\x12\x98\x9b\xc9\x35\xc6\x4d\x4d\x06\xf0\xf5\x53\x74\xb6\xbf\x76\x5d\x53\x5d\xd7\xb6\x1f\xcf\xd8\x1e\xd9\xd4\x72\xdb\x52\x4e\x57\xab\x37\xc1\x58\x63\x05\x77\xd4\x55\xdf\x20\x63\x5f\xd1\xe4\x71\xcf\xda\x89\x64\x38\x19\x5b\x6d\x58\x7d\xbd\x82\x76\x1a\x38\x7b\x2f\x63\xe5\xa7\xfe\xe0\x91\x92\x6c\xcc\xfa\x89\x8f\x83\x50\x86\x4a\x7c\x01\xd7\x6b\xf9\x3c\xaa\xcf\x59\xa3\x2f\x74\x07\x23\x34\x7b\x83\xfb\x84\x82\xfa\x7c\xe6\xe9\x9a\xa6\x4d\x91\x56\xb1\xb7\x97\x44\x86\x31\xda\x2a\xae\xba\xbf\xd4\xc7\xc3\x19\x99\xa9\xdc\xcd\xad\xfc\xea\x0d\xa0\xb7\x55\x79\x80\x3a\xc6\x57\x6b\xbc\xa6\x63\x51\xbc\xda\x19\x85\xbc\x6b\x9e\xea\x6f\xb1\x96\xfc\xb9\x8d\xb8\x22\x2e\x71\xfc\x61\x9e\x65\xc3\xdb\x12\x59\x0c\x32\xc0\x44\xc8\x46\xf2\x51\xba\x9d\xdd\xee\xe7\xec\x58\xe8\x8f\xf6\x13\xb0\x05\xa5\xa2\x21\xb7\x94\x8a\x98\x29\xad\x41\x77\x6a\x25\x7f\x56\xf8\x4b\x5d\x44\xd7\x81\x45\x28\xa1\x1a\xcc\x97\xc7\x81\xfe\x6e\x35\x69\xe9\x43\x34\x0a\xd2\x2e\xd2\x75\xd3\x46\xa2\x30\x08\xbf\xbd\x77\x0c\xc1\x3d\xf4\x48\xaa\x8d\x53\x9b\x97\x3a\x22\xeb\x69\x40\xbc\xa0\x7a\x9f\x7a\x33\x55\xbf\x83\xe1\xb6\xb7\x43\x66\xf8\x36\x07\x8b\x72\x3d\xf5\x7d\xd2\xf3\x09\x85\xf2\xda\x62\x45\xd0\x93\x50\x93\xec\x00\xf6\xcb\x5c\x11\x7f\x16\x85\x40\x85\xcd\x2c\x42\xb4\xb0\x7e\x40\x14\xb8\xdb\x84\x5a\x2b\x7c\x79\x72\x66\xe2\xb9\x7b\x13\x35\xf8\x8d\xb8\x12\xd9\x0d\x94\xac\x36\xd5\x48\x25\x57\xf0\x89\x1c\x4b\xa0\x8a\x9e\x64\xd7\xc7\x47\x88\x66\x71\x2a\x20\xfe\xc3\x6a\x19\x8f\xd2\xe7\x76\xca\x58\x9b\x13\x8d\x32\x3b\x78\xa9\x68\x05\xb6\xee\x7e\xbd\xc8\x32\x15\x3e\xa6\xd3\x07\x10\x95\x37\xfb\xe5\x38\x50\x8a\x98\x95\xa2\xdb\x28\x68\xe2\x69\xc7\x3b\xc2\xdc\xea\xdb\x13\x7c\x3a\x99\x63\x8c\x4d\x74\xa1\xc9\x37\x35\x64\x96\xb5\x84\x7b\x25\xd5\xe8\x78\xc3\xb6\x83\xd2\xf2\x20\xde\x19\x75\x88\xc0\xfc\x8f\x53\xf8\x1b\x3c\xc9\xcd\x71\x70\x92\x42\x32\xd5\x43\x11\x35\x48\x68\x3b\xa1\xa6\x1c\xc8\x82\x81\x00\x2a\xcd\x84\x3a\x1b\xbd\x57\x3e\xb1\x6e\xb5\xfd\x62\x54\x07\xb7\x0d\x08\x4f\xfd\x4e\x88\x36\x74\xdb\x09\x8f\x0d\x96\x5e\xdd\x5c\xb5\x88\x5c\x54\x3e\x34\x16\xe5\xc1\xd5\xec\x5f\xd3\x65\xf0\x07\x30\x0a\x19\x91\x89\xb7\x74\x04\xe2\x35\x9e\x06\x0c\x18\x34\x91\x76\x56\xe2\xf2\x48\x5f\xc6\x53\xee\x50\x17\x30\xfd\x98\xcd\x78\x56\x51\x67\x4b\xed\x77\xc2\x6f\x9e\xd1\x90\xcc\x8d\x70\xa4\x10\x42\x04\xca\x1b\xa6\x81\x2c\x77\x3a\xb4\x1f\xe9\x51\x9b\x75\xa7\xa2\x13\x06\xa4\x07\x2d\x54\x45\xb7\x1b\x29\xa0\x0e\x61\x42\x0b\xbe\xf5\x7d\x67\x73\xa1\xf2\x79\xf6\x51\x8b\x73\xd5\xf7\x5c\x92\x39\xdf\x0e\x04\xb4\x7b\x65\x5f\xd1\x1d\x0e\x52\x14\x9c\x7e\xb6\xa9\xff\xf4\x2b\x52\xf2\x3b\x23\x83\x81\x63\x8a\x8b\xa6\x8e\x64\x38\x64\x7f\x97\xd5\x14\xac\xc7\x75\x41\x28\xc1\xef\x73\x4a\xe2\x93\x43\x2b\x93\xca\xb2\x1f\x9c\x46\x47\x91\x9e\x30\x2c\xc4\xe7\x20\xac\x10\x3b\x67\xb6\x70\x54\x90\x12\xf1\x28\xdd\x6a\x90\xfb\x2d\x2b\x86\x97\x59\x8d\xf8\x1d\x91\x64\xb7\x56\x2c\xcc\x56\x17\xf1\x95\x81\x3e\xfd\x55\xbb\x80\x30\xd4\xc6\x9f\xe9\x0e\xad\xe0\xb3\x4e\x1c\xe0\x49\x0f\x30\x87\xd6\x5a\x99\x84\x23\x5f\xd8\x0f\xe8\xb1\x40\x6c\xa4\x0f\xff\x05\x86\x9d\xe0\x0d\xa1\x6f\xfb\x28\x9a\x26\x4f\x4e\xbd\xcf\x95\x1c\xbb\x0a\xb8\x9c\x95\xc0\xd6\x66\x16\x21\x64\x3e\xc7\xe0\xd3\x3b\xdb\xc4\x4e\xab\x61\xa3\x5a\x5f\x96\x0c\x06\x15\xa7\x0e\xd3\xe8\x43\x1b\xdc\x3f\x52\x70\x0d\xdc\x8f\x8b\xa9\xd2\xa5\x9c\x78\x6e\xd3\x3c\xd4\x32\x45\x71\x8c\x51\x7e\x40\xaf\xc6\x65\xb9\xd6\x11\x5c\xa0\x92\x61\xca\x63\xe9\x92\x9e\x7a\xbb\x94\xbd\x5f\xbd\xfe\x7d\xc8\xed\xd3\xa6\x09\x5e\x63\xa2\x0e\x25\xd6\x07\xdf\x14\x61\x7b\xdf\x14\x21\x2c\xe0\x8a\xb9\xca\x54\x60\x8c\x0a\xeb\xea\xbc\x20\x18\xed\x7b\xe9\xe8\xca\x4e\x7a\xc7\x69\xdd\x61\x80\xc7\xda\x92\xd3\x6d\x0e\x56\xdd\x9a\x92\x21\x09\x46\xcf\xb5\x46\x54\xa1\xce\x4f\xf8\x35\xd8\x43\x6f\x28\xc6\x12\xc8\x39\x73\x3f\xd3\x92\xa8\x47\x24\x55\x42\xd8\x21\x11\x86\xc6\xe4\xdd\x22\x8f\x3d\xea\x8c\x5e\x2a\x2e\xe1\x6e\xae\x8f\x14\x7f\x9a\x41\xf2\x18\xaa\xa4\x0f\xf2\x51\x6a\xf9\x47\xe6\xc0\xbe\x37\x5e\x65\x5c\x3d\xc6\xac\xcf\xcf\xfb\x78\xdb\x4e\x0e\x17\xf9\x5d\x3b\xe1\x2b\xb7\x9b\x5e\x6b\x6b\xdf\xbb\x21\x18\x72\xea\xcb\xf0\xa4\x77\x61\xf9\x1d\x86\x2c\x3b\x2c\x2d\x3f\xee\x0d\xe3\xdc\xe4\xd0\xc5\x88\xaf\x81\xe6\x36\xcb\xf6\x50\xe4\x0b\x42\x1e\xef\x91\x99\xf5\xb1\x0f\x5f\xce\x09\x0a\x48\xc6\xf8\xf1\x9d\x18\x8f\x6f\x5f\x8a\x5b\xbc\x4e\xb5\xa6\x02\x57\x94\x2d\xd6\x7b\x61\xe1\xaf\x95\x39\x42\x32\x17\xdf\x5e\x1d\x54\xff\xc0\x69\x56\x37\x29\x8d\x53\xb5\x8b\xec\x76\xa4\x7e\xdc\x70\x19\xd9\xf7\x7c\x3d\x6e\x5b\x69\x74\x73\xe6\x43\xaf\x05\x3f\xcc\x9e\x4d\x9a\x71\x6d\xd8\xc3\xac\x51\x32\x3a\x9d\xb4\x35\x26\xa9\xb5\x5d\xa1\x81\x04\xca\xd6\x7a\x67\x4a\x02\x9a\x45\x32\x0c\xed\x52\x3d\x3e\x4b\x02\x75\x86\x6e\xac\x18\x8e\x82\x56\xe0\x56\x8d\xb8\x68\x99\x22\xb2\x71\xe6\x49\x87\xcf\x01\x28\x5f\x72\xaa\xf0\xde\x80\x7d\x35\x1b\x78\x02\x30\xb2\x30\xd6\x51\x61\x24\x73\xa1\x9a\x77\x06\x3b\x11\x96\xc9\xe6\xc8\xa7\x24\x82\x9f\x76\x1d\x08\xa2\xf2\x3e\x5a\xa0\x66\xe0\x63\xc5\x29\x4f\xb4\x02\x34\x9a\x64\x4f\x57\xf6\xba\xde\xda\x77\x81\xa5\x94\xf8\xfb\xe9\xdd\xfb\xc3\xc4\x76\x3d\x16\x9d\x5c\x9f\x07\xf2\x19\xdf\x6b\x5a\x50\x59\xc4\x83\xe2\x07\xbc\x70\x0d\xfc\x3c\x4f\xe2\xcc\xad\x35\x3c\x79\x34\x32\xf3\x75\x4d\xae\x5b\xd8\x6d\xb1\xf3\x66\xc5\x4d\xb9\x64\xb7\x49\x7a\xf7\xc5\x3a\xf5\x4c\x27\x08\xcd\x1f\x76\xca\x66\x54\x0e\xf9\x93\x92\x47\x24\x9a\xb8\x9d\x71\x74\xc7\xbc\xcb\x56\xa4\xe3\x99\x4b\x52\xa3\x9b\x7a\xca\xf7\x12\xd4\x10\xef\x56\xa0\x42\x09\xd7\x11\xf8\x71\xb4\xe2\x7a\xe2\xe0\xe6\x41\xcb\xfa\x56\x21\x38\xa2\x46\x40\xaa\xca\xa6\xa0\xec\x31\x11\xd5\x48\xb9\xea\x05\x04\x56\x6d\x1c\x3e\x6b\xad\xbd\xe7\x9b\x02\xe9\x89\xc0\x40\xbc\x76\xa4\xd9\xed\xd2\x55\x97\x69\x08\x90\xb0\x3e\x1d\x1c\x79\x11\x14\x67\x4a\x20\xb8\x70\x9a\x9d\x11\x6e\xdc\xf3\xbc\x12\x20\x96\xda\xc6\xb5\xc8\x96\xfe\x98\x1f\x32\x5c\x6c\xfb\xbe\xf2\x7a\x35\x9b\xde\xf1\x3e\xcd\x60\x05\xf5\xbc\xfc\xf9\xf7\xdc\x13\x5a\xfc\x97\x6f\xea\x97\x48\x6a\xa8\x16\x5d\x31\xf7\x33\x5b\x22\x0c\x04\xf3\x6a\x98\x31\x6a\xfa\x38\x77\x18\xe0\x68\xc9\xf8\x46\x3d\xeb\x12\xa0\x7d\x1f\x48\xc0\x04\xfa\x2b\x5d\xa7\xfd\xdf\xd7\x55\xc0\x96\xc2\xaf\xf7\xbf\xe5\x1d\xfc\x53\xbb\xff\x20\xc8\x7f\xcd\x22\xfb\x1d\x4b\xfe\x37\xd6\xbf\x45\xfe\xff\x27\xfe\x51\xe3\xff\x93\x18\xf9\x5f\xc4\xdf\x4b\x3d\xf8\xa7\xd4\xff\x29\xfd\xaf\x94\x9e\xf6\xb7\xa4\xfc\xb0\xf1\xbf\xa1\xff\x5e\xf0\xc1\x3f\x05\xff\x6f\x92\xfe\x58\x11\x7e\x26\x01\xff\x95\xb4\x4f\xfc\x4f\x92\xdc\x7f\x26\x09\xfe\x59\x12\x98\xe8\x57\x1a\x18\x00\x06\x0c\x00\x01\x80\x8f\x94\xbf\xfe\xfe\x27\x00\x00\xff\xff\xa5\xf7\x1a\x8c\x93\x11\x00\x00")

func localZipBytes() ([]byte, error) {
	return bindataRead(
		_localZip,
		"local.zip",
	)
}

func localZip() (*asset, error) {
	bytes, err := localZipBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local.zip", size: 4499, mode: os.FileMode(438), modTime: time.Unix(1587734840, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"local.zip": localZip,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"local.zip": &bintree{localZip, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
